plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id "com.peterabeles.gversion" version "1.10"
    id "com.diffplug.spotless" version "6.12.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    jvmArgs.add("-XX:+UnlockExperimentalVMOptions")
                    jvmArgs.add("-XX:GCTimeRatio=5")
                    jvmArgs.add("-XX:+UseSerialGC")
                    jvmArgs.add("-XX:MaxGCPauseMillis=50")

                    // The options below may improve performance, but should only be enabled on the RIO 2
                    //
                    // final MAX_JAVA_HEAP_SIZE_MB = 100;
                    // jvmArgs.add("-Xmx" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    // jvmArgs.add("-Xms" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    // jvmArgs.add("-XX:+AlwaysPreTouch")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory on roboRIO
                    deleteOldFiles = false
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Configuration for AdvantageKit
task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
//
// The sim GUI is *disabled* by default to support running
// AdvantageKit log replay from the command line. Set the
// value to "true" to enable the sim GUI by default (this
// is the standard WPILib behavior).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

tasks.register("runWebUITest", JavaExec) {
    group = "application"
    description = "Launches the Reef controls web server locally."
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set("frc.robot.subsystems.objectivetracker.ReefControlsIOServerTest")

    def forwarded = System.properties.findAll { entry ->
        entry.key instanceof String && entry.key.startsWith("webui.")
    }
    if (!forwarded.isEmpty()) {
        systemProperties(forwarded.collectEntries { k, v -> [(k.toString()): v] })
    }

    if (project.hasProperty("webuiPort")) {
        systemProperty("webui.port", project.property("webuiPort"))
    }
    if (project.hasProperty("webuiBind")) {
        systemProperty("webui.bindAddress", project.property("webuiBind"))
    }
}

tasks.register("runReefControlsServer", JavaExec) {
    group = "application"
    description = "Launches the Reef controls web server locally."
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set("frc.robot.subsystems.objectivetracker.ReefControlsServerMain")
}

// Create version file
project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "src/main/java/"
    classPackage = "frc.robot"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/New_York"
    indent       = "  "
}

// Create commit with working changes on event branches
task(eventDeploy) {
    doLast {
        if (project.gradle.startParameter.taskNames.any({ it.toLowerCase().contains("deploy") })) {
            def branchPrefix = "event"
            def branch = 'git branch --show-current'.execute().text.trim()
            def commitMessage = "Update at '${new Date().toString()}'"

            if (branch.startsWith(branchPrefix)) {
                exec {
                    workingDir(projectDir)
                    executable 'git'
                    args 'add', '-A'
                }
                exec {
                    workingDir(projectDir)
                    executable 'git'
                    args 'commit', '-m', commitMessage
                    ignoreExitValue = true
                }

                println "Committed to branch: '$branch'"
                println "Commit message: '$commitMessage'"
            } else {
                println "Not on an event branch, skipping commit"
            }
        } else {
            println "Not running deploy task, skipping commit"
        }
    }
}

def npmCommand = System.getProperty("os.name").toLowerCase().contains("windows") ? "npm.cmd" : "npm"
def webUiDir = file("WebUI")

tasks.register("webuiNpmInstall", Exec) {
    group = "build"
    description = "Install WebUI npm dependencies."
    onlyIf { webUiDir.exists() }
    workingDir = webUiDir
    inputs.files(fileTree(webUiDir) {
        include "package.json", "package-lock.json", "pnpm-lock.yaml", "yarn.lock"
    })
    outputs.dir webUiDir.toPath().resolve("node_modules")
    commandLine npmCommand, "install", "--no-progress"
}

tasks.register("webuiTest", Exec) {
    group = "verification"
    description = "Run the WebUI Vitest suite."
    onlyIf { webUiDir.exists() }
    dependsOn("webuiNpmInstall")
    workingDir = webUiDir
    commandLine npmCommand, "run", "test", "--", "--run"
    environment "CI", "true"
    inputs.dir webUiDir.toPath().resolve("src").toFile()
    inputs.file webUiDir.toPath().resolve("package.json").toFile()
    inputs.file webUiDir.toPath().resolve("tsconfig.json").toFile()
    outputs.upToDateWhen { false }
}

tasks.register("webuiBuild", Exec) {
    group = "build"
    description = "Create a production build of the WebUI dashboard."
    onlyIf { webUiDir.exists() }
    dependsOn("webuiNpmInstall")
    workingDir = webUiDir
    commandLine npmCommand, "run", "build"
    inputs.dir webUiDir.toPath().resolve("src").toFile()
    inputs.file webUiDir.toPath().resolve("package.json").toFile()
    outputs.dir webUiDir.toPath().resolve("dist").toFile()
}

tasks.named("check") {
    dependsOn("webuiTest")
}
createVersionFile.dependsOn(eventDeploy)

// Spotless formatting
project.compileJava.dependsOn(spotlessApply)
spotless {
    java {
        target fileTree(".") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**"
        }
        gson().indentWithSpaces(2)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**"
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
